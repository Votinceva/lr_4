#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <unistd.h>
#include <Windows.h>
#include <windows.h>


const int N = 10;

void gotoxy( int x, int y)
{
    COORD p={ x, y};
    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE) , p);
}

void ship_show(int x, int y, int dir, int size_ship)
{
    int i;
    for (i=0;i<size_ship ;i++)
    {
        gotoxy (x+1,y+1);
        printf("#");

        switch(dir)
        {
            case 0: x++;
            break;
            case 1: y++;
            break;
            case 2: x--;
            break;
            case 3: y--;
            break;
        }
    }
}

bool ship_in_map(int x,int y,int dir,int size_ship)
{
    int i;

    bool in_map=1;
    for(i=0;i < size_ship ;i++){
        if ((x<0)||(y<0)||(x>=N)||(y>=N))
        {
        in_map = 0;
        break;
        }



        switch(dir)
        {
            case 0: x++;
            break;
            case 1: y++;
            break;
            case 2: x--;
            break;
            case 3: y--;
            break;
        }
    }

    return in_map;
}

bool set_ship(int map[N][N],int x,int y,int dir, int size_ship)
{
    int i;
    int temp_x = x;
    int temp_y = y;

    bool setting_is_possible = 1;

    /*проверка возможности постановки корабля*/
    for(i=0;i < size_ship ;i++){
        if ((x<0)||(y<0)||(x>=N)||(y>=N))
        {
            setting_is_possible = 0;
            break;
        }
        /*if ((map[x][y] == 1)||(map[x][y+1] == 1)||(map[x][y-1] == 1)||(map[x+1][y] == 1)||(map[x+1][y+1] == 1)||(map[x+1][y-1] == 1)||(map[x-1][y] == 1)||(map[x-1][y+1] == 1)||(map[x-1][y-1] == 1)){
        setting_is_possible = 0;
        break;
        }*/

        if (map[x][y] >=1) {setting_is_possible = 0; break; }
        if (y < N-1)
        if (map[x][y+1] >=1) {setting_is_possible = 0; break; }
        if (y>0)
        if (map[x][y-1] >=1) {setting_is_possible = 0; break; }
        if (x< N-1)
        if (map[x+1][y] >=1) {setting_is_possible = 0; break; }
        if ((x<N-1) && (y<N-1))
        if (map[x+1][y+1] >=1) {setting_is_possible = 0; break; }
        if ((x<N-1) && (y>0))
        if (map[x+1][y-1] >=1) {setting_is_possible = 0; break; }
        if (x>0)
        if (map[x-1][y] >=1) {setting_is_possible = 0; break; }
        if ((x>0) && (y<N-1))
        if (map[x-1][y+1] >=1) {setting_is_possible = 0; break; }
        if ((x>0) && (y>0))
        if (map[x-1][y-1] >=1) {setting_is_possible = 0; break; }


        switch(dir)
        {
            case 0: x++;
            break;
            case 1: y++;
            break;
            case 2: x--;
            break;
            case 3: y--;
            break;
        }
    }


    if (setting_is_possible==1)
    {
        x = temp_x;
        y = temp_y;

        for (i=0;i<size_ship ;i++)
        {
            map[x][y] = 1;
            switch(dir)
            {
                case 0: x++;
                break;
                case 1: y++;
                break;
                case 2: x--;
                break;
                case 3: y--;
                break;
            }
        }

    }
    return setting_is_possible;
}


void set_rand_ships (int map[N][N], int size_ship, int num_ships)
{
    int i,j,x, y;
    int dir = 0;
    int count_ship=0;
    int count_tact=0;

    while(count_ship < num_ships)
    {
        count_tact++;
        if (count_tact>1000)
        {
            break;
        }
        /*первичная позиция*/
        x=rand()%N;
        y=rand()%N;

        int temp_x = x;
        int temp_y = y;

        /*генерация направления*/


        bool setting_is_possible = 1;

        dir = rand()%4;

        /*проверка возможности постановки корабля*/
        for(i=0;i < size_ship ;i++){
            if ((x<0)||(y<0)||(x>=N)||(y>=N))
            {
                setting_is_possible = 0;
                break;
            }
            if ((map[x][y] == 1)||(map[x][y+1] == 1)||(map[x][y-1] == 1)||(map[x+1][y] == 1)||(map[x+1][y+1] == 1)||(map[x+1][y-1] == 1)||(map[x-1][y] == 1)||(map[x-1][y+1] == 1)||(map[x-1][y-1] == 1)){
                setting_is_possible = 0;
                break;
            }

            switch(dir)
            {
                case 0: x++;
                break;
                case 1: y++;
                break;
                case 2: x--;
                break;
                case 3: y--;
                break;
            }
        }


        if (setting_is_possible==1)
        {
            x = temp_x;
            y = temp_y;

            for (i=0;i<size_ship ;i++)
            {
                map[x][y] = 1;
                switch(dir)
                {
                    case 0: x++;
                    break;
                    case 1: y++;
                    break;
                    case 2: x--;
                    break;
                    case 3: y--;
                    break;
                }
            }
            count_ship++;
        }
    }
}

void map_show (int map[N][N], int mask[N][N])
{

    int i, j;
    printf(" ");

    for (i=0; i<N;i++)
    { /*нумерация столбцов*/
        printf("%d",i);
    }
    printf("\n");

    for (i=0; i<N;i++)
    { /*нумерация строк*/

        printf("%d",i);

        for (j=0;j<N;j++)
        {
        /* if(mask[j][i]==1)*/
        {
            if(map[j][i]==0)
            {
                printf("-");
            }
            else {
                printf("%d", map[j][i]);
            }
        }
            /*else
            {
            printf(" ");

            }*/

        }
        printf("\n");
    }
}

int main()
{
    int N = 10;
    int i,j;

    while(true){

        int map[10][10] = {0};
        int mask[10][10] = {0};



        /* set_rand_ships(map, 4 , 1);
        set_rand_ships(map, 3 , 2);
        set_rand_ships(map, 2 , 3);
        set_rand_ships(map, 1 , 4); */


        int x = 2;
        int y = 2;
        int dir = 1 ;
        int size_ship = 4;
        int ch;

        /* цикл ручной расстановки кораблей */
        while (true)
        {
            map_show(map,mask);
            ship_show(x,y,dir,size_ship);

            int temp_x = x;
            int temp_y = y;
            int temp_dir = dir;


            ch = getch();

            switch (ch)
            {
                case 100 : x++;
                break;
                case 115 : y++;
                break;
                case 97: x--;
                break;
                case 119: y--;
                break;
                case 114: dir = ! dir;
                break;
                case 13:
                {
                    if (set_ship(map, x,y,dir,size_ship))
                    {
                        x = 0;
                        y = 0;
                        dir = 0 ;
                        size_ship--;

                    }
                }
                break;

            }

            if (!ship_in_map(x,y,dir,size_ship))
            {
                x = temp_x ;
                y = temp_y ;
                dir = temp_dir ;
            }

            system("cls");

        }

        while (true)
        {
            map_show(map, mask);

            printf("Enter the coordinates of the goal\n");
            scanf("%d", &x );
            scanf("%d", &y );

            if (map[x][y]==1)
            {
                printf("Hit\n");
            }
            else
            {
                printf("Blunder\n");
            }
            mask[x][y]=1;

            Sleep(1000);
            system("cls");

        }


        getch();
        system("cls");
    }

    system("pause");
    return 0;
}
